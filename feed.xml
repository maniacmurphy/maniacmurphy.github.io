<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Practical Automation</title>
		<description></description>
		<link>http://practical-automation.com</link>
		<atom:link href="http://practical-automation.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Maturing Automation Part 1 - Scripting</title>
				<description>&lt;p&gt;Automation is one of those fun words. It&amp;#39;s one of those things every one wants but no one ever sits down and defines what that means to them. Over my career my understanding of it has changed. When I was first starting out I didn&amp;#39;t really view my one off scripts as &amp;quot;automation&amp;quot;. That word was reserved for fully developed applications not the boot script I used to map printers on branch PCs. Now a days I see automation as the umbrella, much like a DBA and an
Info Sec analyst both work under the IT umbrella. Around the office, I often hear &amp;quot;automation&amp;quot; as &amp;quot;deployment automation&amp;quot;. In a large scaling business, most people drift to the concerns of deployment time work. Last year I started a mission to correct that. Any time I heard some one refer to what I do as &amp;quot;deployment automation&amp;quot;, I would give a little rant about how the focus on deployment was all wrong. This is because deployment is only the beginning of this system&amp;#39;s lifecycle and frankly is the easiest part of automation. But merely automating deploying of an application stack or toolset
doesn&amp;#39;t begin to tame the chaos that is Operations. Enter the first stage in maturing automation, scripting.&lt;/p&gt;

&lt;p&gt;Scripts are simultanously the best and worst tool in an Engineer&amp;#39;s toolbox. The benefits are obvious, there are a plethera of languages out there that make scripting easy, they reduce manual efforts, and they enable operators to take some control over their daily tasks. They also provide a seemingly fast turn around. A manager needs something done, he just turns to his top Engineer and says give me a fast script. It is loved becauase there is no need to include an outside team. No need to talk to
those dreaded developers that just don&amp;#39;t get operational pains. I believe the pains that make them the worst tool are more hidden.&lt;/p&gt;

&lt;p&gt;First, lets ask why are the seemingly a faster turn around. One way I have seen is because the person is developing the script as he completes the work. So work is getting done as the script grows. Also, there is no need for gathering requirements or communicating needs to another developer. The engineer creating his script is also the subject matter expert, so no need for cross team communication. I say these things are hidden because since a script is usually developed and used with in a team, the growth pains of catching and resolving bugs are all internal, unlike when a team is asked to use another team&amp;#39;s tool. The then simple hiccups caught and resolved by the engineer running the script change to the nasty bug that the absent minded developer put in my way.&lt;/p&gt;

&lt;p&gt;Next, I rarely see production scripts controlled under code management and if they are it isn&amp;#39;t a group repo but someone&amp;#39;s private repo that they may have shared to a few collegues but probably isn&amp;#39;t well know for any one to contribute back to or get the latest updates. If that is the case, controlling what version is being used on which system is harder and therefore a chance to introduce inconsistencies into your environment.&lt;/p&gt;

&lt;p&gt;Speaking of inconsitencies, I claim scripts also have just as much chance to increase inconsistencies as they do to reduce them. Have you ever seen a build process that
is, run scripts A, B, C and D. Do you think those scripts were developed and maintained together, or is it more that they were created organically as engineers and systems grew? What if script A from 5 years ago set a simple setting to one thing and then the newer script D, which was developed by a completely different team than the 5 year old team, sets it to another. What happens if the implementor ran them in the wrong order, or forgot to run the last one? Scripts provide false security, but
hey you can already right another validation script to catch that right?&lt;/p&gt;

&lt;p&gt;Neither are they regularly maintained. By maintenance, I mean tested as part of a system upgrade or release
processes to make sure that the new system doesn&amp;#39;t break them, or worse, they break the new system. They don&amp;#39;t grow with the system. If Engineer A likes python and wrote a script to complete a daily task, then left the company and his replacement is more comfortable with java then rather than extending the script they completely redo the script as a java tool and then add the new instruction set.  &lt;/p&gt;

&lt;p&gt;These things aren&amp;#39;t horrible, but they are hidden. It is easier for us to forgive our own mistakes or burdens we put on ourselves than those we see put onto us by others. It is just easier to assume neglect or ignorance on others than assuming that person had the best of intentions to make our lives easier but lacked critical knowledge or just didn&amp;#39;t share the same experience as ourselves. That is the horrible part. That is what breaks communication chains between teams and degrades operational stability and ultimately increases choas in production. Always assume
positive intent. Always try to build up relations with teams rather than tear them down in an act of frustration.&lt;/p&gt;
</description>
				<pubDate>Sat, 23 Jan 2016 00:00:00 -0600</pubDate>
				<link>/2016/01/Maturing_Automation_Part1</link>
				<guid isPermaLink="true">http://practical-automation.com/2016/01/Maturing_Automation_Part1</guid>
			</item>
		
			<item>
				<title>A New Year, A New Style</title>
				<description>&lt;p&gt;I started this blog early last year, in a hope to make up for what I saw as a lack of public documentation around the VMware Puppet modules. For a number of years, I have enjoyed working with VMware products and when I was introduced to Puppet a few years ago I became equally fascinated. So the VMware modules are a great convergence of these interest, however, I feel it is hard for people not familiar with the vSphere APIs to get a lot out of them. The natural place to start seemed to discuss
&lt;a href=&quot;http://practical-automation.com/2015/04/Transports&quot;&gt;Transports&lt;/a&gt; since all the resources rely on them. Then was my post on the &lt;a href=&quot;https://github.com/vmware/vmware-vcsa&quot;&gt;vmware-vcsa&lt;/a&gt; module since it boot straps the VCSA and is a smaller module. After that things got fuzzy, and I lost focus. Honestly, I might have lost a bit of interest in documenting manifests. So in 2016 I plan on mixing it up a bit. I hope to get more involved in the community in order to understand if people have a desire to use these modules and if so what they find as a hinderance. I plan on including some editorials and expand to some other work I hope to be doing in some free time.&amp;#39;&lt;/p&gt;
</description>
				<pubDate>Fri, 22 Jan 2016 00:00:00 -0600</pubDate>
				<link>/2016/01/A_New_year</link>
				<guid isPermaLink="true">http://practical-automation.com/2016/01/A_New_year</guid>
			</item>
		
			<item>
				<title>VCSA Module</title>
				<description>&lt;p&gt;The &lt;a href=&quot;https://github.com/vmware/vmware-vcsa&quot;&gt;vmware-vcsa&lt;/a&gt; module is centered around the initial configuration of the vCenter Server Appliance. The appliance itself comes with everything installed but there is some initial configuration before the vCenter is 100% up.&lt;/p&gt;

&lt;p&gt;Note: The &lt;a href=&quot;https://github.com/vmware/vmware-vcsa&quot;&gt;vmware-vcsa&lt;/a&gt; module currently only supports the 5.x versions of the VCSA. I am pretty sure the changes to the 6.0 VCSA module break some of these, but we will have to fix that soon so stay tuned.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;All these resources use the SSH transport previously discussed. Any manifest using these resources should start with creating the transport&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;transport { ‘ssh’ :
  username =&amp;gt; ‘root’,
  password =&amp;gt; ‘temppassword’,
  server   =&amp;gt; ‘192.168.1.101’,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vcsa_eula&quot;&gt;&lt;strong&gt;vcsa_eula&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Clearly this is used to accept the EULA for the appliance&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_eula { ‘accept’ :
  ensure    =&amp;gt; accept,
  transport =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vcsa_db&quot;&gt;&lt;strong&gt;vcsa_db&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The vcsa_db resource sets the vCenter database settings. I am betting most appliances out there are just running embedded databases which is pretty simple.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_db { ‘embedded_db’ :
  ensure    =&amp;gt; present,
  type      =&amp;gt; ‘embedded’,
  transport =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope you are running an embedded database because while the type allows values ‘oracle’ and ‘PostgreSQL’ the provider doesn’t actually use the additional parameters that would be required to connect to a remote database. I hope we fix this as we retrofit the module for the 6.0 appliance but if you would like this feature I would encourage you to open an issue on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;vcsa_java&quot;&gt;&lt;strong&gt;vcsa_java&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The vcsa_java resource is used to set the javaheap settings for the tomcat, inventory and SPS services. You should make sure to include all three because the command line tool uses them serially.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_java { ‘settings’ :
  ensure     =&amp;gt; present,
  inventory  =&amp;gt; 2048,
  sps        =&amp;gt; 512,
  tomcat     =&amp;gt; 1024,
  transport  =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vcsa_sso&quot;&gt;&lt;strong&gt;vcsa_sso&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The vcsa_sso resource configures where the SSO service will live and it was recently extended to support external SSO services.&lt;/p&gt;

&lt;p&gt;For a simple embedded SSO server:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_sso { ‘sso’ :
  ensure      =&amp;gt; present,
  dbtype      =&amp;gt; ‘embedded’,
  transport   =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Optionally when configuring a local SSO server you can use the password parameter to change the default password for &lt;a href=&quot;mailto:administrator@vsphere.local&quot;&gt;administrator@vsphere.local&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_sso { ‘sso’ :
  ensure     =&amp;gt; present,
  dbtype     =&amp;gt; ‘embedded’,
  password   =&amp;gt; ‘newpassword’,
  transport  =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or for a connecting to an external SSO server:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_sso { ‘sso’ :
  ensure      =&amp;gt; present,
  dbtype      =&amp;gt; ‘external’,
  ls          =&amp;gt; ‘https://&amp;lt;fqdn&amp;gt;:7444/lookupservice/sdk’,
  login       =&amp;gt; ‘administrator@vsphere.local’,
  password    =&amp;gt; ‘mypassword’,
  principal   =&amp;gt; ‘root@localos’, # This is the user or group that will be assigned as the vCenter admin
  is_group    =&amp;gt; false,          # True if the ‘principal’ is set to a user account
  thumbprint  =&amp;gt; &amp;#39;12 34 56 A5 5B 56 E1 4F 3C 6C D5 D0 78 90 D1 29’, # This can be set ‘insecure’ if you want to use an untrusted sort
  transport   =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;vcsa_services&quot;&gt;&lt;strong&gt;vcsa_services&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The vcsa_services resource starts all the services.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vcsa_services { ‘start_services’ :
  ensure     =&amp;gt; present,        # Alternatively this can be set to &amp;#39;running&amp;#39;
  Transport  =&amp;gt; Transport[‘ssh’],
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;&lt;strong&gt;Wrap Up&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;All these resources are centered around the vpxd_servicecfg command line utility. If you want to know more about what can be substituted into each parameter feel free to run  &lt;em&gt;vpxd_servicecfg -h&lt;/em&gt; on your VCSA and see the detailed documentation around how to use the utility.&lt;/p&gt;
</description>
				<pubDate>Mon, 11 May 2015 00:00:00 -0500</pubDate>
				<link>/2015/05/VCSA_Module</link>
				<guid isPermaLink="true">http://practical-automation.com/2015/05/VCSA_Module</guid>
			</item>
		
			<item>
				<title>Transports</title>
				<description>&lt;p&gt;Before I got involved with the VMware puppet modules, I had only been using Puppet for a few months and I had only used it to manage the system the Puppet agent was running on. But the original team behind the VMware modules was trying to manage a system that didn&amp;#39;t run off local config files. They needed to hit a remote system where a local Puppet agent might not work, and so enter &amp;quot;Transports.&amp;quot; I won&amp;#39;t dive too deep into transports as there are already some posts that do that which
I shall link below. But all the VMware modules to rely heavily on some type of transport, so I would be amiss in getting started with walking you through them without at least touching on transports.&lt;/p&gt;

&lt;p&gt;So what makes a transport special? After all, I am sure that the VMware modules aren&amp;#39;t the only ones to attempt to manage a remote system via API or some other interface. An over simplication might be a logical representation of your target system, i.e hostname and credentials. In reality they are also the entity that executes your desired state.  For instance, the vSphere transport type would certainly hold the those details such as hostname and credentials, but when the provider needs
to execute a command it will pass it to the target system via the transport resource within Puppet. What this gets you is the ability to make that initial connection once, and then send all communication through that channel. Depending on the target protocol, that could save you some decent cycles. Currently the VMware modules utilize three transports which I want to introduce you to.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&quot;ssh-transport&quot;&gt;&lt;strong&gt;SSH Transport&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The SSH transport is utilized by the &lt;a href=&quot;https://github.com/vmware/vmware-vcsa&quot;&gt;vmware-vcsa&lt;/a&gt; module. This module is focused on getting the VMware vCenter Service Appliance bootstrapped so the services are configured and running. The view is that an appliance is a black box and so one shouldn&amp;#39;t count on a puppet agent running local. It is for this reason the &lt;a href=&quot;https://github.com/vmware/vmware-vcsa&quot;&gt;vmware-vcsa&lt;/a&gt; module uses the SSH transport to send commands to the remote system to bring up the vmware services. &lt;/p&gt;

&lt;p&gt;The options can be a hash consisting of additional command line parameters to pass to the ssh session.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   transport { &amp;#39;ssh&amp;#39;:
     username =&amp;gt; &amp;#39;localuser&amp;#39;,
     password =&amp;gt; &amp;#39;mypassword&amp;#39;,
     server   =&amp;gt; &amp;#39;fqdn&amp;#39;,
     # options  =&amp;gt; $ssh_options,
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&quot;vsphere-transport&quot;&gt;&lt;strong&gt;vSphere Transport&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The vSphere trasnport is, as expected, utilized by the &lt;a href=&quot;https://github.com/vmware/vmware-vcenter&quot;&gt;vmware-vcenter&lt;/a&gt; module. This interacts with the vSphere API to configure vCenter or ESX hosts. The options here can be a hash of additional options for the connection. The example below shows setting the API revision and the insecure option to allow for self-signed certificates.&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   transport { &amp;#39;vcenter&amp;#39;:
     username =&amp;gt; &amp;#39;localuser&amp;#39;,
     password =&amp;gt; &amp;#39;mypassword&amp;#39;,
     server   =&amp;gt; &amp;#39;fqdn&amp;#39;,
     options  =&amp;gt; {
       &amp;quot;insecure&amp;quot; =&amp;gt; true,
       &amp;quot;rev&amp;quot; =&amp;gt; &amp;quot;5.1&amp;quot;,
     },
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&quot;vshield-transport&quot;&gt;&lt;strong&gt;vShield Transport&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Again, clearly the vShield transport is used by the &lt;a href=&quot;https://github.com/vmware/vmware-vshield&quot;&gt;vmware-vshield&lt;/a&gt; module and it interacts with the vShield API. This transport does not have an options parameter&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   transport { &amp;#39;vshield&amp;#39;:
     username =&amp;gt; &amp;#39;localuser&amp;#39;,
     password =&amp;gt; &amp;#39;mypassword&amp;#39;,
     server   =&amp;gt; &amp;#39;fqdn&amp;#39;,
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&quot;additional-references&quot;&gt;&lt;strong&gt;Additional References&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vmware/vmware-vmware_lib/blob/master/lib/puppet_x/puppetlabs/transport/ssh.rb&quot;&gt;SSH Transport&lt;/a&gt; : Review the code for the SSH transport&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vmware/vmware-vcenter/blob/master/lib/puppet_x/puppetlabs/transport/vsphere.rb&quot;&gt;vSphere Transport&lt;/a&gt; : Review the code for the vSphere transport&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vmware/vmware-vshield/blob/master/lib/puppet_x/puppetlabs/transport/vshield.rb&quot;&gt;vShield Transport&lt;/a&gt; : Review the code for the vShield transport&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nanliu.me/blog/2013/02/27/puppet-managing-vcenter-and-vshield&quot;&gt;Nan Liu&lt;/a&gt; : See Nan Liu&amp;#39;s original post on these modules and their transports&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Wed, 29 Apr 2015 00:00:00 -0500</pubDate>
				<link>/2015/04/Transports</link>
				<guid isPermaLink="true">http://practical-automation.com/2015/04/Transports</guid>
			</item>
		
			<item>
				<title>Introduction</title>
				<description>&lt;p&gt;I am sure my story is no different than most of yall. I am a technology geek that has been blessed enough to make his hobby his career, or was it making my career my hobby? In either case, I have spent my career learning from those that have come before me and I feel that I am finally able to give back in some small way. I hope this blog will help ease those getting started with some of the amazing tools out there, and to start with I am going to help introduce you to what we are doing with the VMware Puppet modules. I will try and keep each post from going too into the weeds, but if I don&amp;#39;t explain things clearly or you have a request for me to cover a specific resource type feel free to reach out to me on &lt;a href=&quot;https://twitter.com/IcanScriptThat&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yesterday, we updated the modules on the &lt;a href=&quot;https://forge.puppetlabs.com/vmware&quot;&gt;forge&lt;/a&gt;. This was long overdue and moving forward they will be kept updated.&lt;/p&gt;
</description>
				<pubDate>Wed, 22 Apr 2015 00:00:00 -0500</pubDate>
				<link>/2015/04/Introduction</link>
				<guid isPermaLink="true">http://practical-automation.com/2015/04/Introduction</guid>
			</item>
		
	</channel>
</rss>
